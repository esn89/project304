This system was created using SQL*Plus and Java (JDBC).

The system was has a back end which involved SQL statements for queries and a graphical front-end in Java which is partly accomplished with NetBeans.

// briefly talk about our Table class and how stuff extends
// it

The graphical front end involves mainly text fields and each text field has a corresponding "getter" to grab values from.
Once "gotten" the value is stored in a string then checked for empty values and then they are passed on to be used by the SQL statements.

Error handling:
===========

-We ensured that the fields which are critical to executing an SQL statement
successfully are filled in before a button is pressed by popping up error dialogs.

-For 'Payment Method' if the user selected payment by 'Cash' AND happened to enter credit card information and then pressing the 'Complete Purchase' button, a pop will tell the user that that cannot be allowed.

-Likewise, if the user selected credit card payment and didn't fill in those fields, that is handled by an error prompt as well.

-For 'Process a Return' we ensured that the fields 'Item UPC' and 'Quantity' are filled in before the final button is pressed.

-For the 'Registration' under 'Customer', more error dialog boxes will pop up if a field is missing when you click 'Create!'

-For the 'Purchase Items Online', the 'Search' button won't conduct a search unless the 'Quantity' field is filled in.
Also, before pressing 'OK' to buy an item, the system makes sure that there is an Item UPC entered.

-For 'Add items to store' we also made sure that the manager needed to fill in at least the 'Item UPC' and 'Quantity' field before the 'Add to Inventory' button actually completes the request.

-For 'Process Delivery' we made sure that that field wasn't left blank.

-For both 'Daily Sales Report' and 'Top Selling Items' we made a check to ensure that the date is entered, and if there weren't any sales on that date, there will be a message letting the manager know.
